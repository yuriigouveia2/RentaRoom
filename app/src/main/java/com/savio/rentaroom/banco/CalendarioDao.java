package com.savio.rentaroom.banco;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.savio.rentaroom.banco.Calendario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALENDARIO".
*/
public class CalendarioDao extends AbstractDao<Calendario, Long> {

    public static final String TABLENAME = "CALENDARIO";

    /**
     * Properties of entity Calendario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hora = new Property(1, java.util.Date.class, "hora", false, "HORA");
        public final static Property Dia = new Property(2, java.util.Date.class, "dia", false, "DIA");
        public final static Property Mes = new Property(3, java.util.Date.class, "mes", false, "MES");
        public final static Property Ano = new Property(4, java.util.Date.class, "ano", false, "ANO");
        public final static Property Sala_id = new Property(5, String.class, "sala_id", false, "SALA_ID");
    };

    private Query<Calendario> sala_Alugar_idsQuery;

    public CalendarioDao(DaoConfig config) {
        super(config);
    }
    
    public CalendarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALENDARIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"HORA\" INTEGER," + // 1: hora
                "\"DIA\" INTEGER," + // 2: dia
                "\"MES\" INTEGER," + // 3: mes
                "\"ANO\" INTEGER," + // 4: ano
                "\"SALA_ID\" TEXT);"); // 5: sala_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALENDARIO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Calendario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date hora = entity.getHora();
        if (hora != null) {
            stmt.bindLong(2, hora.getTime());
        }
 
        java.util.Date dia = entity.getDia();
        if (dia != null) {
            stmt.bindLong(3, dia.getTime());
        }
 
        java.util.Date mes = entity.getMes();
        if (mes != null) {
            stmt.bindLong(4, mes.getTime());
        }
 
        java.util.Date ano = entity.getAno();
        if (ano != null) {
            stmt.bindLong(5, ano.getTime());
        }
 
        String sala_id = entity.getSala_id();
        if (sala_id != null) {
            stmt.bindString(6, sala_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Calendario readEntity(Cursor cursor, int offset) {
        Calendario entity = new Calendario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // hora
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dia
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // mes
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // ano
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sala_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Calendario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHora(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDia(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMes(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setAno(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSala_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Calendario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Calendario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "alugar_ids" to-many relationship of Sala. */
    public List<Calendario> _querySala_Alugar_ids(String sala_id) {
        synchronized (this) {
            if (sala_Alugar_idsQuery == null) {
                QueryBuilder<Calendario> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sala_id.eq(null));
                sala_Alugar_idsQuery = queryBuilder.build();
            }
        }
        Query<Calendario> query = sala_Alugar_idsQuery.forCurrentThread();
        query.setParameter(0, sala_id);
        return query.list();
    }

}
