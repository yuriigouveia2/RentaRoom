package com.savio.rentaroom.banco;

import java.util.List;
import com.savio.rentaroom.banco.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DEPARTAMENTO".
 */
public class Departamento {

    private String nome;
    private String email;
    private String telefone;
    private String centro_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DepartamentoDao myDao;

    private List<Sala> salas_ids;
    private List<Professor> professores_ids;

    public Departamento() {
    }

    public Departamento(String nome) {
        this.nome = nome;
    }

    public Departamento(String nome, String email, String telefone, String centro_id) {
        this.nome = nome;
        this.email = email;
        this.telefone = telefone;
        this.centro_id = centro_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDepartamentoDao() : null;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getTelefone() {
        return telefone;
    }

    public void setTelefone(String telefone) {
        this.telefone = telefone;
    }

    public String getCentro_id() {
        return centro_id;
    }

    public void setCentro_id(String centro_id) {
        this.centro_id = centro_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Sala> getSalas_ids() {
        if (salas_ids == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SalaDao targetDao = daoSession.getSalaDao();
            List<Sala> salas_idsNew = targetDao._queryDepartamento_Salas_ids(nome);
            synchronized (this) {
                if(salas_ids == null) {
                    salas_ids = salas_idsNew;
                }
            }
        }
        return salas_ids;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSalas_ids() {
        salas_ids = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Professor> getProfessores_ids() {
        if (professores_ids == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProfessorDao targetDao = daoSession.getProfessorDao();
            List<Professor> professores_idsNew = targetDao._queryDepartamento_Professores_ids(nome);
            synchronized (this) {
                if(professores_ids == null) {
                    professores_ids = professores_idsNew;
                }
            }
        }
        return professores_ids;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProfessores_ids() {
        professores_ids = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
