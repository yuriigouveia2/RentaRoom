package com.savio.rentaroom.banco;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.savio.rentaroom.banco.Sala;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALA".
*/
public class SalaDao extends AbstractDao<Sala, String> {

    public static final String TABLENAME = "SALA";

    /**
     * Properties of entity Sala.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Nome = new Property(0, String.class, "nome", true, "NOME");
        public final static Property Uso = new Property(1, String.class, "uso", false, "USO");
        public final static Property Localizacao = new Property(2, String.class, "localizacao", false, "LOCALIZACAO");
        public final static Property Capacidade = new Property(3, Integer.class, "capacidade", false, "CAPACIDADE");
        public final static Property Departamento_id = new Property(4, String.class, "departamento_id", false, "DEPARTAMENTO_ID");
    };

    private DaoSession daoSession;

    private Query<Sala> departamento_Salas_idsQuery;

    public SalaDao(DaoConfig config) {
        super(config);
    }
    
    public SalaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALA\" (" + //
                "\"NOME\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: nome
                "\"USO\" TEXT," + // 1: uso
                "\"LOCALIZACAO\" TEXT," + // 2: localizacao
                "\"CAPACIDADE\" INTEGER," + // 3: capacidade
                "\"DEPARTAMENTO_ID\" TEXT);"); // 4: departamento_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sala entity) {
        stmt.clearBindings();
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(1, nome);
        }
 
        String uso = entity.getUso();
        if (uso != null) {
            stmt.bindString(2, uso);
        }
 
        String localizacao = entity.getLocalizacao();
        if (localizacao != null) {
            stmt.bindString(3, localizacao);
        }
 
        Integer capacidade = entity.getCapacidade();
        if (capacidade != null) {
            stmt.bindLong(4, capacidade);
        }
 
        String departamento_id = entity.getDepartamento_id();
        if (departamento_id != null) {
            stmt.bindString(5, departamento_id);
        }
    }

    @Override
    protected void attachEntity(Sala entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sala readEntity(Cursor cursor, int offset) {
        Sala entity = new Sala( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nome
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uso
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localizacao
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // capacidade
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // departamento_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sala entity, int offset) {
        entity.setNome(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUso(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocalizacao(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCapacidade(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDepartamento_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Sala entity, long rowId) {
        return entity.getNome();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Sala entity) {
        if(entity != null) {
            return entity.getNome();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "salas_ids" to-many relationship of Departamento. */
    public List<Sala> _queryDepartamento_Salas_ids(String departamento_id) {
        synchronized (this) {
            if (departamento_Salas_idsQuery == null) {
                QueryBuilder<Sala> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Departamento_id.eq(null));
                departamento_Salas_idsQuery = queryBuilder.build();
            }
        }
        Query<Sala> query = departamento_Salas_idsQuery.forCurrentThread();
        query.setParameter(0, departamento_id);
        return query.list();
    }

}
