package com.savio.rentaroom.banco;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.savio.rentaroom.banco.Departamento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTAMENTO".
*/
public class DepartamentoDao extends AbstractDao<Departamento, String> {

    public static final String TABLENAME = "DEPARTAMENTO";

    /**
     * Properties of entity Departamento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Nome = new Property(0, String.class, "nome", true, "NOME");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Telefone = new Property(2, String.class, "telefone", false, "TELEFONE");
        public final static Property Centro_id = new Property(3, String.class, "centro_id", false, "CENTRO_ID");
    };

    private DaoSession daoSession;

    private Query<Departamento> centro_Departamentos_idsQuery;

    public DepartamentoDao(DaoConfig config) {
        super(config);
    }
    
    public DepartamentoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTAMENTO\" (" + //
                "\"NOME\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: nome
                "\"EMAIL\" TEXT," + // 1: email
                "\"TELEFONE\" TEXT," + // 2: telefone
                "\"CENTRO_ID\" TEXT);"); // 3: centro_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTAMENTO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Departamento entity) {
        stmt.clearBindings();
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(1, nome);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(3, telefone);
        }
 
        String centro_id = entity.getCentro_id();
        if (centro_id != null) {
            stmt.bindString(4, centro_id);
        }
    }

    @Override
    protected void attachEntity(Departamento entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Departamento readEntity(Cursor cursor, int offset) {
        Departamento entity = new Departamento( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nome
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // telefone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // centro_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Departamento entity, int offset) {
        entity.setNome(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTelefone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCentro_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Departamento entity, long rowId) {
        return entity.getNome();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Departamento entity) {
        if(entity != null) {
            return entity.getNome();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "departamentos_ids" to-many relationship of Centro. */
    public List<Departamento> _queryCentro_Departamentos_ids(String centro_id) {
        synchronized (this) {
            if (centro_Departamentos_idsQuery == null) {
                QueryBuilder<Departamento> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Centro_id.eq(null));
                centro_Departamentos_idsQuery = queryBuilder.build();
            }
        }
        Query<Departamento> query = centro_Departamentos_idsQuery.forCurrentThread();
        query.setParameter(0, centro_id);
        return query.list();
    }

}
